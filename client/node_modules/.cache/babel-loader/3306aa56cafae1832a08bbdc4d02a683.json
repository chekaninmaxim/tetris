{"ast":null,"code":"import Settings from './settings';\n\nclass TetrisFigure {\n  constructor(startPosition, rotation, color = '#00ff00') {\n    this.position = this.ensureInside(startPosition, rotation);\n    this.rotation = rotation;\n    this.color = color;\n  }\n\n  rotate() {\n    return new this.constructor(this.position, (this.rotation + 1) % 4, this.color);\n  }\n\n  move(newPosition) {\n    return new this.constructor(newPosition, this.rotation, this.color);\n  }\n\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    switch (this.rotation) {\n      case 0:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x,\n          y: y - 1\n        }];\n\n      case 1:\n        return [{\n          x,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      case 2:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      case 3:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      default:\n        return [];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(rotation == 1 ? 0 : 1, Math.min(x, Settings.stageSize.width - (rotation == 3 ? 1 : 2))),\n      y: Math.max(rotation == 3 ? 0 : 1, Math.min(y, Settings.stageSize.height - (rotation == 0 ? 1 : 2)))\n    };\n  }\n\n}\n\nclass TetrisSquare extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n    return [{\n      x,\n      y\n    }, {\n      x: x + 1,\n      y\n    }, {\n      x,\n      y: y + 1\n    }, {\n      x: x + 1,\n      y: y + 1\n    }];\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(0, Math.min(x, Settings.stageSize.width - 2)),\n      y: Math.max(0, Math.min(y, Settings.stageSize.height - 2))\n    };\n  }\n\n}\n\nclass TetrisLine extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    if (this.rotation % 2) {\n      return [{\n        x,\n        y\n      }, {\n        x: x + 1,\n        y\n      }, {\n        x: x + 2,\n        y\n      }, {\n        x: x + 3,\n        y\n      }];\n    } else {\n      return [{\n        x,\n        y\n      }, {\n        x,\n        y: y + 1\n      }, {\n        x,\n        y: y + 2\n      }, {\n        x,\n        y: y + 3\n      }];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(0, Math.min(x, Settings.stageSize.width - 4)),\n      y: Math.max(0, Math.min(y, Settings.stageSize.height - 4))\n    };\n  }\n\n}\n\nexport function getMovableBlock() {\n  return new TetrisSquare({\n    x: 1,\n    y: 4\n  }, 0);\n}","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/block.js"],"names":["Settings","TetrisFigure","constructor","startPosition","rotation","color","position","ensureInside","rotate","move","newPosition","blocks","x","y","Math","max","min","stageSize","width","height","TetrisSquare","TetrisLine","getMovableBlock"],"mappings":"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","sourcesContent":["import Settings from './settings';\n\nclass TetrisFigure {\n\tconstructor(startPosition, rotation, color='#00ff00') {\n\t\tthis.position = this.ensureInside(startPosition, rotation);\n\t\tthis.rotation = rotation;\n\t\tthis.color = color\n\t}\n\n\trotate() {\n\t\treturn new this.constructor(this.position, (this.rotation + 1) % 4, this.color)\n\t}\n\n\tmove(newPosition) {\n\t\treturn new this.constructor(newPosition, this.rotation, this.color)\n\t}\n\n\tget blocks() {\n\t\tconst {x, y} = this.position\n\t\tswitch (this.rotation) {\n\t\t\tcase 0:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x, y: y - 1 }\n\t\t\t\t];\n\t\t\tcase 1:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 2:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 3:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tdefault: return []\n\t\t}\n\t}\n\n\tensureInside({x, y}, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(\n\t\t\t\trotation == 1 ? 0 : 1,\n\t\t\t\tMath.min(x, Settings.stageSize.width - (rotation == 3 ? 1 : 2))),\n\n\t\t\ty: Math.max(\n\t\t\t\trotation == 3 ? 0 : 1,\n\t\t\t\tMath.min(y, Settings.stageSize.height - (rotation == 0 ? 1 : 2)))\n\t\t}\n\t}\n\n}\n\nclass TetrisSquare extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position\n\n\t\treturn [\n\t\t\t{ x, y },\n\t\t\t{ x: x + 1, y },\n\t\t\t{ x, y: y + 1 },\n\t\t\t{ x: x + 1, y: y + 1 },\n\n\t\t];\n\t}\n\n\tensureInside({x, y}, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(0, Math.min(x, Settings.stageSize.width - 2)),\n\t\t\ty: Math.max(0, Math.min(y, Settings.stageSize.height - 2))\n\t\t}\n\t}\n\n}\n\nclass TetrisLine extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position\n\n\t\tif (this.rotation % 2) {\n\t\t\treturn [\n\t\t\t\t{ x, y },\n\t\t\t\t{ x: x + 1, y },\n\t\t\t\t{ x: x + 2, y },\n\t\t\t\t{ x: x + 3, y },\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\t{ x, y },\n\t\t\t\t{ x, y: y + 1 },\n\t\t\t\t{ x, y: y + 2 },\n\t\t\t\t{ x, y: y + 3 },\n\t\t\t];\n\t\t}\n\t}\n\n\tensureInside({ x, y }, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(0, Math.min(x, Settings.stageSize.width - 4)),\n\t\t\ty: Math.max(0, Math.min(y, Settings.stageSize.height - 4))\n\t\t}\n\t}\n\n}\n\n\nexport function getMovableBlock() {\n\treturn new TetrisSquare({x: 1, y: 4}, 0);\n}"]},"metadata":{},"sourceType":"module"}