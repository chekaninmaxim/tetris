{"ast":null,"code":"import Settings from './settings.js';\nexport const makeInitialState = function () {\n  const blocksMap = [];\n\n  for (let i = 0; i < Settings.stageSize.height; i++) {\n    blocksMap.push(Array(10));\n  }\n\n  return {\n    movableBlocks: [{\n      position: {\n        x: 2,\n        y: 0\n      },\n      color: 'red'\n    }, {\n      position: {\n        x: 2,\n        y: 1\n      },\n      color: 'blue'\n    }, {\n      position: {\n        x: 3,\n        y: 1\n      },\n      color: 'yellow'\n    }, {\n      position: {\n        x: 2,\n        y: 2\n      },\n      color: 'red'\n    }],\n    blocksMap: blocksMap\n  };\n};\n\nfunction moveBlocksFactory(getNewPosition) {\n  const isFigureStuck = state.movableBlocks.some(block => {\n    const newPosition = getNewPosition(block.position);\n    return Boolean(state.blocksMap[block.position.x][block.position.y + 1]) || newPosition.y >= Settings.stageSize.height;\n  });\n\n  if (isFigureStuck) {\n    const newBlocksMap = state.blocksMap.slice();\n\n    for (let block of state.movableBlocks) {\n      newBlocksMap[block.position.x][block.position.y + 1] = block.color;\n    }\n\n    return {\n      movableBlocks: [],\n      blocksMap: newBlocksMap\n    };\n  } else {\n    const newMovableBlocks = state.movableBlocks.map(block => {\n      const newBlock = { ...block,\n        position: {\n          x: block.position.x,\n          y: block.position.y + 1\n        }\n      };\n      return newBlock;\n    });\n    return { ...state,\n      movableBlocks: newMovableBlocks\n    };\n  }\n}\n\nexport const moveBlocksDown = moveBlocksFactory(p => ({\n  x: p.x,\n  y: p.y\n}));","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/state.js"],"names":["Settings","makeInitialState","blocksMap","i","stageSize","height","push","Array","movableBlocks","position","x","y","color","moveBlocksFactory","getNewPosition","isFigureStuck","state","some","block","newPosition","Boolean","newBlocksMap","slice","newMovableBlocks","map","newBlock","moveBlocksDown","p"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,YAAW;AAC1C,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,SAAT,CAAmBC,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;AACnDD,IAAAA,SAAS,CAACI,IAAV,CAAeC,KAAK,CAAC,EAAD,CAApB;AACA;;AACD,SAAO;AACNC,IAAAA,aAAa,EAAG,CACf;AACCC,MAAAA,QAAQ,EAAE;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE;AAAV,OADX;AAECC,MAAAA,KAAK,EAAE;AAFR,KADe,EAKf;AACCH,MAAAA,QAAQ,EAAE;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE;AAAV,OADX;AAECC,MAAAA,KAAK,EAAE;AAFR,KALe,EASf;AACCH,MAAAA,QAAQ,EAAE;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE;AAAV,OADX;AAECC,MAAAA,KAAK,EAAE;AAFR,KATe,EAaf;AACCH,MAAAA,QAAQ,EAAE;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE;AAAV,OADX;AAECC,MAAAA,KAAK,EAAE;AAFR,KAbe,CADV;AAmBNV,IAAAA,SAAS,EAAEA;AAnBL,GAAP;AAqBA,CA1BM;;AA4BP,SAASW,iBAAT,CAA2BC,cAA3B,EAA2C;AAE1C,QAAMC,aAAa,GAAGC,KAAK,CAACR,aAAN,CAAoBS,IAApB,CAAyBC,KAAK,IAAI;AACvD,UAAMC,WAAW,GAAGL,cAAc,CAACI,KAAK,CAACT,QAAP,CAAlC;AAEA,WAAOW,OAAO,CAACJ,KAAK,CAACd,SAAN,CAAgBgB,KAAK,CAACT,QAAN,CAAeC,CAA/B,EAAkCQ,KAAK,CAACT,QAAN,CAAeE,CAAf,GAAmB,CAArD,CAAD,CAAP,IACHQ,WAAW,CAACR,CAAZ,IAAiBX,QAAQ,CAACI,SAAT,CAAmBC,MADxC;AAEA,GALqB,CAAtB;;AAOA,MAAIU,aAAJ,EAAmB;AAClB,UAAMM,YAAY,GAAGL,KAAK,CAACd,SAAN,CAAgBoB,KAAhB,EAArB;;AACA,SAAK,IAAIJ,KAAT,IAAkBF,KAAK,CAACR,aAAxB,EAAuC;AACtCa,MAAAA,YAAY,CAACH,KAAK,CAACT,QAAN,CAAeC,CAAhB,CAAZ,CAA+BQ,KAAK,CAACT,QAAN,CAAeE,CAAf,GAAmB,CAAlD,IAAuDO,KAAK,CAACN,KAA7D;AACA;;AACD,WAAO;AACNJ,MAAAA,aAAa,EAAG,EADV;AAENN,MAAAA,SAAS,EAAEmB;AAFL,KAAP;AAIA,GATD,MASO;AACN,UAAME,gBAAgB,GAAGP,KAAK,CAACR,aAAN,CAAoBgB,GAApB,CAAwBN,KAAK,IAAI;AACzD,YAAMO,QAAQ,GAAG,EAChB,GAAGP,KADa;AAEhBT,QAAAA,QAAQ,EAAG;AACVC,UAAAA,CAAC,EAAEQ,KAAK,CAACT,QAAN,CAAeC,CADR;AAEVC,UAAAA,CAAC,EAAEO,KAAK,CAACT,QAAN,CAAeE,CAAf,GAAmB;AAFZ;AAFK,OAAjB;AAOA,aAAOc,QAAP;AACA,KATwB,CAAzB;AAWA,WAAO,EACN,GAAGT,KADG;AAENR,MAAAA,aAAa,EAAEe;AAFT,KAAP;AAIA;AACD;;AAED,OAAO,MAAMG,cAAc,GAAGb,iBAAiB,CAACc,CAAC,KAAK;AAACjB,EAAAA,CAAC,EAAEiB,CAAC,CAACjB,CAAN;AAASC,EAAAA,CAAC,EAAEgB,CAAC,CAAChB;AAAd,CAAL,CAAF,CAAxC","sourcesContent":["import Settings from './settings.js';\n\nexport const makeInitialState = function() {\n\tconst blocksMap = [];\n\tfor (let i = 0; i < Settings.stageSize.height; i++) {\n\t\tblocksMap.push(Array(10));\n\t}\n\treturn {\n\t\tmovableBlocks : [\n\t\t\t{\n\t\t\t\tposition: {x: 2, y: 0},\n\t\t\t\tcolor: 'red'\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: {x: 2, y: 1},\n\t\t\t\tcolor: 'blue'\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: {x: 3, y: 1},\n\t\t\t\tcolor: 'yellow'\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: {x: 2, y: 2},\n\t\t\t\tcolor: 'red'\n\t\t\t},\n\t\t],\n\t\tblocksMap: blocksMap,\n\t}\n}\n\nfunction moveBlocksFactory(getNewPosition) {\n\n\tconst isFigureStuck = state.movableBlocks.some(block => {\n\t\tconst newPosition = getNewPosition(block.position);\n\n\t\treturn Boolean(state.blocksMap[block.position.x][block.position.y + 1])\n\t\t\t|| newPosition.y >= Settings.stageSize.height;\n\t});\n\n\tif (isFigureStuck) {\n\t\tconst newBlocksMap = state.blocksMap.slice();\n\t\tfor (let block of state.movableBlocks) {\n\t\t\tnewBlocksMap[block.position.x][block.position.y + 1] = block.color;\n\t\t}\n\t\treturn {\n\t\t\tmovableBlocks : [],\n\t\t\tblocksMap: newBlocksMap\n\t\t}\n\t} else {\n\t\tconst newMovableBlocks = state.movableBlocks.map(block => {\n\t\t\tconst newBlock = {\n\t\t\t\t...block,\n\t\t\t\tposition : {\n\t\t\t\t\tx: block.position.x,\n\t\t\t\t\ty: block.position.y + 1\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn newBlock;\n\t\t});\n\n\t\treturn {\n\t\t\t...state,\n\t\t\tmovableBlocks: newMovableBlocks,\n\t\t}\n\t}\n}\n\nexport const moveBlocksDown = moveBlocksFactory(p => ({x: p.x, y: p.y}));"]},"metadata":{},"sourceType":"module"}