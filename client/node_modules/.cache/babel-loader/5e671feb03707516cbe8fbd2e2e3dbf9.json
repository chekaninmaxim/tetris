{"ast":null,"code":"import Settings from './settings';\n\nclass TetrisFigure {\n  constructor(startPosition, rotation, color = '#00ff00') {\n    this.position = this.ensureInside(startPosition, rotation);\n    this.rotation = rotation % 4;\n    this.color = color;\n  }\n\n  rotate() {\n    return new this.constructor(this.position, (this.rotation + 1) % 4, this.color);\n  }\n\n  move(newPosition) {\n    return new this.constructor(newPosition, this.rotation, this.color);\n  }\n\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    switch (this.rotation) {\n      case 0:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x,\n          y: y - 1\n        }];\n\n      case 1:\n        return [{\n          x,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      case 2:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      case 3:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      default:\n        return [];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(rotation == 1 ? 0 : 1, Math.min(x, Settings.stageSize.width - (rotation == 3 ? 1 : 2))),\n      y: Math.max(rotation == 3 ? 0 : 1, Math.min(y, Settings.stageSize.height - (rotation == 0 ? 1 : 2)))\n    };\n  }\n\n}\n\nclass TetrisSquare extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n    return [{\n      x,\n      y\n    }, {\n      x: x + 1,\n      y\n    }, {\n      x,\n      y: y + 1\n    }, {\n      x: x + 1,\n      y: y + 1\n    }];\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(0, Math.min(x, Settings.stageSize.width - 2)),\n      y: Math.max(0, Math.min(y, Settings.stageSize.height - 2))\n    };\n  }\n\n}\n\nclass TetrisLine extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    if (this.rotation % 2) {\n      return [{\n        x,\n        y\n      }, {\n        x: x + 1,\n        y\n      }, {\n        x: x + 2,\n        y\n      }, {\n        x: x + 3,\n        y\n      }];\n    } else {\n      return [{\n        x,\n        y\n      }, {\n        x,\n        y: y + 1\n      }, {\n        x,\n        y: y + 2\n      }, {\n        x,\n        y: y + 3\n      }];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(0, Math.min(x, Settings.stageSize.width - (rotation % 2 === 1 ? 4 : 1))),\n      y: Math.max(0, Math.min(y, Settings.stageSize.height - (rotation % 2 === 0 ? 4 : 1)))\n    };\n  }\n\n}\n\nclass TetrisLeftStep extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    if (this.rotation % 2) {\n      return [{\n        x,\n        y: y - 1\n      }, {\n        x,\n        y\n      }, {\n        x: x + 1,\n        y: y\n      }, {\n        x: x + 1,\n        y: y + 1\n      }];\n    } else {\n      return [{\n        x: x - 1,\n        y\n      }, {\n        x,\n        y\n      }, {\n        x,\n        y: y - 1\n      }, {\n        x: x + 1,\n        y: y - 1\n      }];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(rotation % 2 ? 0 : 1, Math.min(x, Settings.stageSize.width - 2)),\n      y: Math.max(rotation % 2 ? 1 : 0, Math.min(y, Settings.stageSize.height - (rotation % 2 === 1 ? 2 : 1)))\n    };\n  }\n\n}\n\nclass TetrisRightStep extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    if (this.rotation % 2) {\n      return [{\n        x,\n        y: y + 1\n      }, {\n        x,\n        y\n      }, {\n        x: x + 1,\n        y\n      }, {\n        x: x + 1,\n        y: y - 1\n      }];\n    } else {\n      return [{\n        x: x - 1,\n        y\n      }, {\n        x,\n        y\n      }, {\n        x,\n        y: y + 1\n      }, {\n        x: x + 1,\n        y: y + 1\n      }];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(rotation % 2 ? 0 : 1, Math.min(x, Settings.stageSize.width - 2)),\n      y: Math.max(rotation % 2 ? 1 : 0, Math.min(y, Settings.stageSize.height - 2))\n    };\n  }\n\n}\n\nclass TetrisLShape extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    switch (this.rotation) {\n      case 0:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x: x + 1,\n          y: y - 1\n        }];\n\n      case 1:\n        return [{\n          x,\n          y\n        }, {\n          x: x + 1,\n          y: y + 1\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      case 2:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x: x - 1,\n          y: y + 1\n        }];\n\n      case 3:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y: y - 1\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      default:\n        return [];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(rotation == 1 ? 0 : 1, Math.min(x, Settings.stageSize.width - (rotation === 3 ? 1 : 2))),\n      y: Math.max(rotation == 2 ? 0 : 1, Math.min(y, Settings.stageSize.height - (rotation === 0 ? 1 : 2)))\n    };\n  }\n\n}\n\nclass TetrisLShapeMirror extends TetrisFigure {\n  get blocks() {\n    const {\n      x,\n      y\n    } = this.position;\n\n    switch (this.rotation) {\n      case 0:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x: x - 1,\n          y: y - 1\n        }];\n\n      case 1:\n        return [{\n          x,\n          y\n        }, {\n          x: x + 1,\n          y: y - 1\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      case 2:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y\n        }, {\n          x: x + 1,\n          y\n        }, {\n          x: x + 1,\n          y: y + 1\n        }];\n\n      case 3:\n        return [{\n          x,\n          y\n        }, {\n          x: x - 1,\n          y: y + 1\n        }, {\n          x,\n          y: y - 1\n        }, {\n          x,\n          y: y + 1\n        }];\n\n      default:\n        return [];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(rotation === 1 ? 0 : 1, Math.min(x, Settings.stageSize.width - (rotation === 3 ? 1 : 2))),\n      y: Math.max(rotation === 2 ? 0 : 1, Math.min(y, Settings.stageSize.height - (rotation === 0 ? 1 : 2)))\n    };\n  }\n\n}\n\nconst constructors = [(point, rotation, color) => new TetrisFigure(point, rotation, color), (point, rotation, color) => new TetrisSquare(point, rotation, color), (point, rotation, color) => new TetrisLeftStep(point, rotation, color), (point, rotation, color) => new TetrisRightStep(point, rotation, color), (point, rotation, color) => new TetrisLShape(point, rotation, color), (point, rotation, color) => new TetrisLShapeMirror(point, rotation, color), (point, rotation, color) => new TetrisLine(point, rotation, color)];\nexport function getRandomFigure() {\n  const color = Math.floor(Math.random() * 16777215).toString(16);\n  const point = {\n    y: 0,\n    x: Math.floor(Math.random() * Settings.stageSize.width)\n  };\n  const rotation = Math.floor(Math.random() * 4);\n  const shapeIdx = Math.floor(Math.random() * 4);\n  return constructors[shapeIdx](point, color, rotation);\n}","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/figure.js"],"names":["Settings","TetrisFigure","constructor","startPosition","rotation","color","position","ensureInside","rotate","move","newPosition","blocks","x","y","Math","max","min","stageSize","width","height","TetrisSquare","TetrisLine","TetrisLeftStep","TetrisRightStep","TetrisLShape","TetrisLShapeMirror","constructors","point","getRandomFigure","floor","random","toString","shapeIdx"],"mappings":"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","sourcesContent":["import Settings from './settings';\n\nclass TetrisFigure {\n\tconstructor(startPosition, rotation, color='#00ff00') {\n\t\tthis.position = this.ensureInside(startPosition, rotation);\n\t\tthis.rotation = rotation % 4;\n\t\tthis.color = color\n\t}\n\n\trotate() {\n\t\treturn new this.constructor(this.position, (this.rotation + 1) % 4, this.color)\n\t}\n\n\tmove(newPosition) {\n\t\treturn new this.constructor(newPosition, this.rotation, this.color)\n\t}\n\n\tget blocks() {\n\t\tconst {x, y} = this.position\n\t\tswitch (this.rotation) {\n\t\t\tcase 0:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x, y: y - 1 }\n\t\t\t\t];\n\t\t\tcase 1:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 2:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 3:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tdefault: return []\n\t\t}\n\t}\n\n\tensureInside({x, y}, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(\n\t\t\t\trotation == 1 ? 0 : 1,\n\t\t\t\tMath.min(x, Settings.stageSize.width - (rotation == 3 ? 1 : 2))),\n\n\t\t\ty: Math.max(\n\t\t\t\trotation == 3 ? 0 : 1,\n\t\t\t\tMath.min(y, Settings.stageSize.height - (rotation == 0 ? 1 : 2)))\n\t\t}\n\t}\n\n}\n\nclass TetrisSquare extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position\n\n\t\treturn [\n\t\t\t{ x, y },\n\t\t\t{ x: x + 1, y },\n\t\t\t{ x, y: y + 1 },\n\t\t\t{ x: x + 1, y: y + 1 },\n\n\t\t];\n\t}\n\n\tensureInside({x, y}, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(0, Math.min(x, Settings.stageSize.width - 2)),\n\t\t\ty: Math.max(0, Math.min(y, Settings.stageSize.height - 2))\n\t\t}\n\t}\n\n}\n\nclass TetrisLine extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position\n\n\t\tif (this.rotation % 2) {\n\t\t\treturn [\n\t\t\t\t{ x, y },\n\t\t\t\t{ x: x + 1, y },\n\t\t\t\t{ x: x + 2, y },\n\t\t\t\t{ x: x + 3, y },\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\t{ x, y },\n\t\t\t\t{ x, y: y + 1 },\n\t\t\t\t{ x, y: y + 2 },\n\t\t\t\t{ x, y: y + 3 },\n\t\t\t];\n\t\t}\n\t}\n\n\tensureInside({ x, y }, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(0, Math.min(x, Settings.stageSize.width - (rotation % 2 === 1 ? 4 : 1))),\n\t\t\ty: Math.max(0, Math.min(y, Settings.stageSize.height - (rotation % 2 === 0 ? 4 : 1)))\n\t\t}\n\t}\n\n}\n\nclass TetrisLeftStep extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position\n\n\t\tif (this.rotation % 2) {\n\t\t\treturn [\n\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t{ x, y },\n\t\t\t\t{ x: x + 1, y: y },\n\t\t\t\t{ x: x + 1, y: y + 1},\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\t{ x: x - 1, y },\n\t\t\t\t{ x, y },\n\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t{ x: x + 1, y: y - 1 },\n\t\t\t];\n\t\t}\n\t}\n\n\tensureInside({ x, y }, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(rotation % 2 ? 0 : 1, Math.min(x, Settings.stageSize.width - 2)),\n\t\t\ty: Math.max(rotation % 2 ? 1 : 0, Math.min(y, Settings.stageSize.height - (rotation % 2 === 1 ? 2 : 1)))\n\t\t}\n\t}\n}\n\nclass TetrisRightStep extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position\n\n\t\tif (this.rotation % 2) {\n\t\t\treturn [\n\t\t\t\t{ x, y: y + 1 },\n\t\t\t\t{ x, y },\n\t\t\t\t{ x: x + 1, y },\n\t\t\t\t{ x: x + 1, y: y - 1 },\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\t{ x: x - 1, y },\n\t\t\t\t{ x, y },\n\t\t\t\t{ x, y: y + 1 },\n\t\t\t\t{ x: x + 1, y: y + 1 },\n\t\t\t];\n\t\t}\n\t}\n\n\tensureInside({ x, y }, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(rotation % 2 ? 0 : 1, Math.min(x, Settings.stageSize.width - 2)),\n\t\t\ty: Math.max(rotation % 2 ? 1 : 0, Math.min(y, Settings.stageSize.height - 2))\n\t\t}\n\t}\n\n}\n\nclass TetrisLShape extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position;\n\n\t\tswitch (this.rotation) {\n\t\t\tcase 0:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x: x + 1, y: y - 1 }\n\t\t\t\t];\n\t\t\tcase 1:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x + 1, y: y + 1 },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 2:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x: x - 1, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 3:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y: y - 1 },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tdefault: return []\n\t\t}\n\t}\n\n\tensureInside({ x, y }, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(rotation == 1 ? 0 : 1, Math.min(x, Settings.stageSize.width - (rotation === 3 ? 1 : 2))),\n\t\t\ty: Math.max(rotation == 2 ? 0 : 1, Math.min(y, Settings.stageSize.height - (rotation === 0 ? 1 : 2)))\n\t\t}\n\t}\n\n}\n\nclass TetrisLShapeMirror extends TetrisFigure {\n\n\tget blocks() {\n\t\tconst { x, y } = this.position;\n\n\t\tswitch (this.rotation) {\n\t\t\tcase 0:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x: x - 1, y: y - 1 }\n\t\t\t\t];\n\t\t\tcase 1:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x + 1, y: y - 1 },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 2:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y },\n\t\t\t\t\t{ x: x + 1, y },\n\t\t\t\t\t{ x: x + 1, y: y + 1 }\n\t\t\t\t]\n\t\t\tcase 3:\n\t\t\t\treturn [\n\t\t\t\t\t{ x, y },\n\t\t\t\t\t{ x: x - 1, y: y + 1 },\n\t\t\t\t\t{ x, y: y - 1 },\n\t\t\t\t\t{ x, y: y + 1 }\n\t\t\t\t]\n\t\t\tdefault: return []\n\t\t}\n\t}\n\n\tensureInside({ x, y }, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(rotation === 1 ? 0 : 1, Math.min(x, Settings.stageSize.width - (rotation === 3 ? 1 : 2))),\n\t\t\ty: Math.max(rotation === 2 ? 0 : 1, Math.min(y, Settings.stageSize.height - (rotation === 0 ? 1 : 2)))\n\t\t}\n\t}\n\n}\n\n\nconst constructors = [\n\t(point, rotation, color) => new TetrisFigure(point, rotation, color),\n\t(point, rotation, color) => new TetrisSquare(point, rotation, color),\n\t(point, rotation, color) => new TetrisLeftStep(point, rotation, color),\n\t(point, rotation, color) => new TetrisRightStep(point, rotation, color),\n\t(point, rotation, color) => new TetrisLShape(point, rotation, color),\n\t(point, rotation, color) => new TetrisLShapeMirror(point, rotation, color),\n\t(point, rotation, color) => new TetrisLine(point, rotation, color),\n];\n\nexport function getRandomFigure() {\n\tconst color = Math.floor(Math.random() * 16777215).toString(16);\n\tconst point = {y : 0, x : Math.floor(Math.random() * Settings.stageSize.width)};\n\tconst rotation = Math.floor(Math.random() * 4);\n\tconst shapeIdx = Math.floor(Math.random() * 4); \n\n\treturn constructors[shapeIdx](point, color, rotation);\n}"]},"metadata":{},"sourceType":"module"}