{"ast":null,"code":"import Settings from './settings.js';\nexport const makeInitialState = function () {\n  const blocksMap = [];\n\n  for (let i = 0; i < Settings.stageSize.height; i++) {\n    blocksMap.push(Array(10));\n  }\n\n  return {\n    movableBlocks: [{\n      position: {\n        x: 2,\n        y: 0\n      },\n      color: 'red'\n    }, {\n      position: {\n        x: 2,\n        y: 1\n      },\n      color: 'blue'\n    }, {\n      position: {\n        x: 3,\n        y: 1\n      },\n      color: 'yellow'\n    }, {\n      position: {\n        x: 2,\n        y: 2\n      },\n      color: 'red'\n    }],\n    blocksMap: blocksMap\n  };\n};\nexport const moveBlocksDown = function (state) {\n  // for (let block of state.movableBlocks) {\n  // \tconst newX = block.position.x;\n  // \tconst newY = block.position.y + 1;\n  // \tif (state.blocksMap[newY][newX]) {\n  // \t\tconst newBlocksMap = state.blocksMap.slice();\n  // \t\treturn {}\n  // \t}\n  // }\n  const isFigureStuck = state.movableBlocks.some(block => {\n    const newY = block.position.y + 1;\n    const newX = block.position.x;\n    const isOutOfBounds = 0 <= newX && newX < Settings.stageSize.width && 0 <= newY && newY < Settings.stageSize.height;\n    const isStuck = Boolean(state.blocksMap[block.position.x][block.position.y + 1]);\n    isOutOfBounds || isStuck;\n  });\n\n  if (isFigureStuck) {\n    const newBlocksMap = state.blocksMap.slice();\n\n    for (let block of state.movableBlocks) {\n      newBlocksMap[block.position.x][block.position.y + 1] = block.color;\n    }\n\n    return {\n      movableBlocks: [],\n      blocksMap: newBlocksMap\n    };\n  } else {\n    const newMovableBlocks = state.movableBlocks.map(block => {\n      const newBlock = { ...block,\n        position: {\n          x: block.position.x,\n          y: block.position.y\n        }\n      };\n      return newBlock;\n    });\n    return { ...state,\n      movableBlocks: newMovableBlocks\n    };\n  }\n};","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/state.js"],"names":["Settings","makeInitialState","blocksMap","i","stageSize","height","push","Array","movableBlocks","position","x","y","color","moveBlocksDown","state","isFigureStuck","some","block","newY","newX","isOutOfBounds","width","isStuck","Boolean","newBlocksMap","slice","newMovableBlocks","map","newBlock"],"mappings":"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","sourcesContent":["import Settings from './settings.js';\n\nexport const makeInitialState = function() {\n\tconst blocksMap = [];\n\tfor (let i = 0; i < Settings.stageSize.height; i++) {\n\t\tblocksMap.push(Array(10));\n\t}\n\treturn {\n\t\tmovableBlocks : [\n\t\t\t{\n\t\t\t\tposition: {x: 2, y: 0},\n\t\t\t\tcolor: 'red'\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: {x: 2, y: 1},\n\t\t\t\tcolor: 'blue'\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: {x: 3, y: 1},\n\t\t\t\tcolor: 'yellow'\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: {x: 2, y: 2},\n\t\t\t\tcolor: 'red'\n\t\t\t},\n\t\t],\n\t\tblocksMap: blocksMap,\n\t}\n}\n\nexport const moveBlocksDown = function(state) {\n\t// for (let block of state.movableBlocks) {\n\t// \tconst newX = block.position.x;\n\t// \tconst newY = block.position.y + 1;\n\t// \tif (state.blocksMap[newY][newX]) {\n\t// \t\tconst newBlocksMap = state.blocksMap.slice();\n\t// \t\treturn {}\n\t// \t}\n\t// }\n\tconst isFigureStuck = state.movableBlocks.some(block => {\n\t\tconst newY = block.position.y + 1;\n\t\tconst newX = block.position.x;\n\n\t\tconst isOutOfBounds = 0 <= newX\n\t\t\t&& newX < Settings.stageSize.width\n\t\t\t&& 0 <= newY\n\t\t\t&& newY < Settings.stageSize.height;\n\n\t\tconst isStuck = Boolean(state.blocksMap[block.position.x][block.position.y + 1]);\n\t\tisOutOfBounds || isStuck;\n\t});\n\n\tif (isFigureStuck) {\n\t\tconst newBlocksMap = state.blocksMap.slice();\n\t\tfor (let block of state.movableBlocks) {\n\t\t\tnewBlocksMap[block.position.x][block.position.y + 1] = block.color;\n\t\t}\n\t\treturn {\n\t\t\tmovableBlocks : [],\n\t\t\tblocksMap: newBlocksMap\n\t\t}\n\t} else {\n\t\tconst newMovableBlocks = state.movableBlocks.map(block => {\n\t\t\tconst newBlock = {\n\t\t\t\t...block,\n\t\t\t\tposition : {\n\t\t\t\t\tx: block.position.x,\n\t\t\t\t\ty: block.position.y\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn newBlock;\n\t\t});\n\n\t\treturn {\n\t\t\t...state,\n\t\t\tmovableBlocks: newMovableBlocks,\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}