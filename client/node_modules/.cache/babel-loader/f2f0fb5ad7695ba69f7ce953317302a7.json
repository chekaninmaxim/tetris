{"ast":null,"code":"import Settings from './settings.js';\nimport { getMovableBlock, TetrisFigure } from './block.js';\nexport const makeInitialState = function () {\n  const blocksMap = [];\n\n  for (let i = 0; i < Settings.stageSize.height; i++) {\n    blocksMap.push(Array(Settings.stageSize.width));\n  }\n\n  return {\n    figure: getMovableBlock(),\n    blocksMap: blocksMap\n  };\n};\n\nconst positionsEqual = function (p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n};\n\nfunction moveBlocksFactory(getNewPosition, isDown = false) {\n  const setStateFn = function ({\n    figure,\n    blocksMap\n  }) {\n    const oldPositions = figure.blocks;\n    const newFigure = figure.move(getNewPosition(figure.position));\n    const newPositions = newFigure.blocks;\n    const isMoveInvalid = newPositions.some((block, i) => blocksMap[block.y][block.x] || positionsEqual(block, oldPositions[i]));\n\n    if (isMoveInvalid) {\n      if (isDown) {\n        const newBlocksMap = blocksMap.slice();\n\n        for (let block of oldPositions) {\n          newBlocksMap[block.y][block.x] = figure.color;\n        }\n\n        return {\n          figure: null,\n          blocksMap: newBlocksMap\n        };\n      } else {\n        return {\n          figure,\n          blocksMap\n        };\n      }\n    } else {\n      return {\n        figure: newFigure,\n        blocksMap\n      };\n    }\n  };\n\n  return setStateFn;\n}\n\nexport const moveBlocksDown = moveBlocksFactory(p => ({\n  x: p.x,\n  y: Math.min(p.y + 1, Settings.stageSize.height - 1)\n}), true);\nexport const moveBlocksLeft = moveBlocksFactory(p => ({\n  x: Math.max(p.x - 1, 0),\n  y: p.y\n}));\nexport const moveBlocksRight = moveBlocksFactory(p => ({\n  x: Math.min(p.x + 1, Settings.stageSize.width - 1),\n  y: p.y\n}));","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/state.js"],"names":["Settings","getMovableBlock","TetrisFigure","makeInitialState","blocksMap","i","stageSize","height","push","Array","width","figure","positionsEqual","p1","p2","x","y","moveBlocksFactory","getNewPosition","isDown","setStateFn","oldPositions","blocks","newFigure","move","position","newPositions","isMoveInvalid","some","block","newBlocksMap","slice","color","moveBlocksDown","p","Math","min","moveBlocksLeft","max","moveBlocksRight"],"mappings":"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","sourcesContent":["import Settings from './settings.js';\nimport { getMovableBlock, TetrisFigure } from './block.js';\n\nexport const makeInitialState = function() {\n\tconst blocksMap = [];\n\n\tfor (let i = 0; i < Settings.stageSize.height; i++) {\n\t\tblocksMap.push(Array(Settings.stageSize.width));\n\t}\n\n\treturn {\n\t\tfigure : getMovableBlock(),\n\t\tblocksMap: blocksMap,\n\t}\n}\n\nconst positionsEqual = function(p1, p2) {\n\treturn p1.x === p2.x && p1.y === p2.y\n}\n\n\nfunction moveBlocksFactory(getNewPosition, isDown=false) {\n\n\tconst setStateFn = function({figure, blocksMap}) {\n\n\t\tconst oldPositions = figure.blocks;\n\t\tconst newFigure = figure.move(getNewPosition(figure.position));\n\t\tconst newPositions = newFigure.blocks;\n\n\t\tconst isMoveInvalid = newPositions.some(\n\t\t\t(block, i) => blocksMap[block.y][block.x] || positionsEqual(block, oldPositions[i])\n\t\t);\n\n\t\tif (isMoveInvalid) {\n\t\t\tif (isDown) {\n\n\t\t\t\tconst newBlocksMap = blocksMap.slice();\n\t\t\t\tfor (let block of oldPositions) {\n\t\t\t\t\tnewBlocksMap[block.y][block.x] = figure.color;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tfigure : null,\n\t\t\t\t\tblocksMap: newBlocksMap\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tfigure,\n\t\t\t\t\tblocksMap\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\n\t\t\treturn {\n\t\t\t\tfigure: newFigure,\n\t\t\t\tblocksMap\n\t\t\t};\n\t\t}\n\t}\n\n\treturn setStateFn;\n}\n\nexport const moveBlocksDown = moveBlocksFactory(p => ({\n\tx: p.x,\n\ty: Math.min(p.y + 1, Settings.stageSize.height - 1)\n}), true);\n\nexport const moveBlocksLeft = moveBlocksFactory(p => ({\n\tx: Math.max(p.x - 1, 0),\n\ty: p.y\n}));\n\nexport const moveBlocksRight = moveBlocksFactory(p => ({\n\tx: Math.min(p.x + 1, Settings.stageSize.width - 1),\n\ty: p.y\n}));\n"]},"metadata":{},"sourceType":"module"}