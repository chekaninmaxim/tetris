{"ast":null,"code":"import Settings from './settings';\nimport C from './constants';\nimport { getRandomFigure } from './figure';\nexport const makeInitialState = function () {\n  const blocksMap = [];\n\n  for (let i = 0; i < Settings.stageSize.height; i++) {\n    blocksMap.push(Array(Settings.stageSize.width));\n  }\n\n  return {\n    figure: getRandomFigure(),\n    blocksMap: blocksMap\n  };\n};\n\nconst positionsEqual = function (p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n};\n\nexport function blocksReducer({\n  figure,\n  blocksMap\n}, action) {\n  if (!figure) {\n    return {\n      figure: getRandomFigure(),\n      blocksMap\n    };\n  }\n\n  const oldPositions = figure.blocks;\n  const newFigure = getNextFigure(figure, action.type);\n  const newPositions = newFigure.blocks;\n  let isStuck = false;\n\n  try {\n    isStuck = newPositions.some(block => blocksMap[block.y][block.x]);\n  } catch (error) {\n    console.log(error);\n    return {\n      figure,\n      blocksMap\n    };\n  }\n\n  const samePositions = newPositions.every((block, i) => positionsEqual(block, oldPositions[i]));\n\n  if (action.type === C.DOWN) {\n    if (isStuck || samePositions) {\n      const newBlocksMap = blocksMap.slice();\n\n      for (let block of oldPositions) {\n        newBlocksMap[block.y][block.x] = figure.color;\n      }\n\n      return {\n        figure: null,\n        blocksMap: newBlocksMap\n      };\n    } else {\n      return {\n        figure: newFigure,\n        blocksMap\n      };\n    }\n  } else {\n    return {\n      figure: isStuck ? figure : newFigure,\n      blocksMap\n    };\n  }\n}\n\nfunction getNextFigure(figure, action) {\n  const {\n    x,\n    y\n  } = figure.position;\n\n  switch (action) {\n    case C.LEFT:\n      return figure.move({\n        x: x - 1,\n        y\n      });\n\n    case C.RIGHT:\n      return figure.move({\n        x: x + 1,\n        y\n      });\n\n    case C.DOWN:\n      return figure.move({\n        x,\n        y: y + 1\n      });\n\n    case C.ROTATE:\n      return figure.rotate();\n\n    default:\n      return figure;\n  }\n}","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/state.js"],"names":["Settings","C","getRandomFigure","makeInitialState","blocksMap","i","stageSize","height","push","Array","width","figure","positionsEqual","p1","p2","x","y","blocksReducer","action","oldPositions","blocks","newFigure","getNextFigure","type","newPositions","isStuck","some","block","error","console","log","samePositions","every","DOWN","newBlocksMap","slice","color","position","LEFT","move","RIGHT","ROTATE","rotate"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,CAAP,MAAc,aAAd;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,YAAW;AAC1C,QAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,SAAT,CAAmBC,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;AACnDD,IAAAA,SAAS,CAACI,IAAV,CAAeC,KAAK,CAACT,QAAQ,CAACM,SAAT,CAAmBI,KAApB,CAApB;AACA;;AAED,SAAO;AACNC,IAAAA,MAAM,EAAGT,eAAe,EADlB;AAENE,IAAAA,SAAS,EAAEA;AAFL,GAAP;AAIA,CAXM;;AAaP,MAAMQ,cAAc,GAAG,UAASC,EAAT,EAAaC,EAAb,EAAiB;AACvC,SAAOD,EAAE,CAACE,CAAH,KAASD,EAAE,CAACC,CAAZ,IAAiBF,EAAE,CAACG,CAAH,KAASF,EAAE,CAACE,CAApC;AACA,CAFD;;AAIA,OAAO,SAASC,aAAT,CAAuB;AAAEN,EAAAA,MAAF;AAAUP,EAAAA;AAAV,CAAvB,EAA8Cc,MAA9C,EAAsD;AAC5D,MAAI,CAACP,MAAL,EAAa;AACZ,WAAO;AACNA,MAAAA,MAAM,EAAET,eAAe,EADjB;AAENE,MAAAA;AAFM,KAAP;AAIA;;AAED,QAAMe,YAAY,GAAGR,MAAM,CAACS,MAA5B;AAEA,QAAMC,SAAS,GAAGC,aAAa,CAACX,MAAD,EAASO,MAAM,CAACK,IAAhB,CAA/B;AACA,QAAMC,YAAY,GAAGH,SAAS,CAACD,MAA/B;AAEA,MAAIK,OAAO,GAAG,KAAd;;AACA,MAAI;AACHA,IAAAA,OAAO,GAAGD,YAAY,CAACE,IAAb,CACTC,KAAK,IAAIvB,SAAS,CAACuB,KAAK,CAACX,CAAP,CAAT,CAAmBW,KAAK,CAACZ,CAAzB,CADA,CAAV;AAIA,GALD,CAKE,OAAOa,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO;AACNjB,MAAAA,MADM;AAENP,MAAAA;AAFM,KAAP;AAIA;;AAED,QAAM2B,aAAa,GAAGP,YAAY,CAACQ,KAAb,CACrB,CAACL,KAAD,EAAQtB,CAAR,KAAcO,cAAc,CAACe,KAAD,EAAQR,YAAY,CAACd,CAAD,CAApB,CADP,CAAtB;;AAIA,MAAIa,MAAM,CAACK,IAAP,KAAgBtB,CAAC,CAACgC,IAAtB,EAA4B;AAC3B,QAAIR,OAAO,IAAIM,aAAf,EAA8B;AAC7B,YAAMG,YAAY,GAAG9B,SAAS,CAAC+B,KAAV,EAArB;;AACA,WAAK,IAAIR,KAAT,IAAkBR,YAAlB,EAAgC;AAC/Be,QAAAA,YAAY,CAACP,KAAK,CAACX,CAAP,CAAZ,CAAsBW,KAAK,CAACZ,CAA5B,IAAiCJ,MAAM,CAACyB,KAAxC;AACA;;AAED,aAAO;AACNzB,QAAAA,MAAM,EAAE,IADF;AAENP,QAAAA,SAAS,EAAE8B;AAFL,OAAP;AAIA,KAVD,MAUO;AACN,aAAO;AACNvB,QAAAA,MAAM,EAAEU,SADF;AAENjB,QAAAA;AAFM,OAAP;AAIA;AACD,GAjBD,MAiBO;AACN,WAAO;AACNO,MAAAA,MAAM,EAAEc,OAAO,GAAGd,MAAH,GAAYU,SADrB;AAENjB,MAAAA;AAFM,KAAP;AAIA;AACD;;AAED,SAASkB,aAAT,CAAuBX,MAAvB,EAA+BO,MAA/B,EAAuC;AACtC,QAAM;AAAEH,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAWL,MAAM,CAAC0B,QAAxB;;AACA,UAAQnB,MAAR;AACC,SAAKjB,CAAC,CAACqC,IAAP;AACC,aAAO3B,MAAM,CAAC4B,IAAP,CAAY;AAAExB,QAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,QAAAA;AAAZ,OAAZ,CAAP;;AACD,SAAKf,CAAC,CAACuC,KAAP;AACC,aAAO7B,MAAM,CAAC4B,IAAP,CAAY;AAAExB,QAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,QAAAA;AAAZ,OAAZ,CAAP;;AACD,SAAKf,CAAC,CAACgC,IAAP;AACC,aAAOtB,MAAM,CAAC4B,IAAP,CAAY;AAAExB,QAAAA,CAAF;AAAKC,QAAAA,CAAC,EAAEA,CAAC,GAAG;AAAZ,OAAZ,CAAP;;AACD,SAAKf,CAAC,CAACwC,MAAP;AACC,aAAO9B,MAAM,CAAC+B,MAAP,EAAP;;AACD;AACC,aAAO/B,MAAP;AAVF;AAYA","sourcesContent":["import Settings from './settings'\nimport C from './constants'\nimport { getRandomFigure } from './figure'\n\nexport const makeInitialState = function() {\n\tconst blocksMap = [];\n\n\tfor (let i = 0; i < Settings.stageSize.height; i++) {\n\t\tblocksMap.push(Array(Settings.stageSize.width));\n\t}\n\n\treturn {\n\t\tfigure : getRandomFigure(),\n\t\tblocksMap: blocksMap,\n\t}\n}\n\nconst positionsEqual = function(p1, p2) {\n\treturn p1.x === p2.x && p1.y === p2.y\n}\n\nexport function blocksReducer({ figure, blocksMap }, action) {\n\tif (!figure) {\n\t\treturn {\n\t\t\tfigure: getRandomFigure(),\n\t\t\tblocksMap\n\t\t}\n\t}\n\n\tconst oldPositions = figure.blocks;\n\n\tconst newFigure = getNextFigure(figure, action.type)\n\tconst newPositions = newFigure.blocks;\n\n\tlet isStuck = false; \n\ttry {\n\t\tisStuck = newPositions.some(\n\t\t\tblock => blocksMap[block.y][block.x]\n\t\t);\n\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\treturn {\n\t\t\tfigure,\n\t\t\tblocksMap\n\t\t}\t\n\t}\n\n\tconst samePositions = newPositions.every(\n\t\t(block, i) => positionsEqual(block, oldPositions[i])\n\t);\n\n\tif (action.type === C.DOWN) {\n\t\tif (isStuck || samePositions) {\n\t\t\tconst newBlocksMap = blocksMap.slice();\n\t\t\tfor (let block of oldPositions) {\n\t\t\t\tnewBlocksMap[block.y][block.x] = figure.color;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfigure: null,\n\t\t\t\tblocksMap: newBlocksMap\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tfigure: newFigure,\n\t\t\t\tblocksMap\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tfigure: isStuck ? figure : newFigure,\n\t\t\tblocksMap\n\t\t};\n\t}\n}\n\nfunction getNextFigure(figure, action) {\n\tconst { x, y } = figure.position;\n\tswitch (action) {\n\t\tcase C.LEFT:\n\t\t\treturn figure.move({ x: x - 1, y });\n\t\tcase C.RIGHT:\n\t\t\treturn figure.move({ x: x + 1, y });\n\t\tcase C.DOWN:\n\t\t\treturn figure.move({ x, y: y + 1 });\n\t\tcase C.ROTATE:\n\t\t\treturn figure.rotate();\n\t\tdefault:\n\t\t\treturn figure;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}