{"ast":null,"code":"import Settings from './settings';\nimport C from './constants';\nexport class TetrisFigure {\n  constructor(startPosition, rotation, color = '#00ff00') {\n    this.position = this.ensureInside(startPosition, rotation);\n    this.rotation = rotation;\n    this.color = color;\n  }\n\n  rotate() {\n    return new this.constructor(this.position, (this.rotation + 1) % 4, this.color);\n  }\n\n  move(newPosition) {\n    return new this.constructor(newPosition, this.rotation, this.color);\n  }\n\n  getNextFigure(action) {\n    const {\n      x,\n      y\n    } = this.position;\n\n    switch (action) {\n      case C.left:\n        return this.move({\n          x: x - 1,\n          y\n        });\n\n      case C.right:\n        return this.move({\n          x: x + 1,\n          y\n        });\n\n      case C.down:\n        return this.move({\n          x,\n          y: y + 1\n        });\n\n      case C.rotate:\n        return this.rotate();\n\n      default:\n        return this;\n    }\n  }\n\n  get blocks() {\n    switch (this.rotation) {\n      case 0:\n        return [{ ...this.position\n        }, { ...this.position,\n          x: this.position.x - 1\n        }, { ...this.position,\n          x: this.position.x + 1\n        }, { ...this.position,\n          y: this.position.y - 1\n        }];\n\n      case 1:\n        return [{ ...this.position\n        }, { ...this.position,\n          x: this.position.x + 1\n        }, { ...this.position,\n          y: this.position.y - 1\n        }, { ...this.position,\n          y: this.position.y + 1\n        }];\n\n      case 2:\n        return [{ ...this.position\n        }, { ...this.position,\n          x: this.position.x - 1\n        }, { ...this.position,\n          x: this.position.x + 1\n        }, { ...this.position,\n          y: this.position.y + 1\n        }];\n\n      case 3:\n        return [{ ...this.position\n        }, { ...this.position,\n          x: this.position.x - 1\n        }, { ...this.position,\n          y: this.position.y - 1\n        }, { ...this.position,\n          y: this.position.y + 1\n        }];\n\n      default:\n        return [];\n    }\n  }\n\n  ensureInside({\n    x,\n    y\n  }, rotation) {\n    return {\n      x: Math.max(1, Math.min(x, Settings.stageSize.width - (rotation == 3 ? 1 : 2))),\n      y: Math.max(1, Math.min(y, Settings.stageSize.height - (rotation == 0 ? 1 : 2)))\n    };\n  }\n\n}\nexport function getMovableBlock() {\n  return new TetrisFigure({\n    x: 1,\n    y: 4\n  }, 0);\n}","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/block.js"],"names":["Settings","C","TetrisFigure","constructor","startPosition","rotation","color","position","ensureInside","rotate","move","newPosition","getNextFigure","action","x","y","left","right","down","blocks","Math","max","min","stageSize","width","height","getMovableBlock"],"mappings":"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","sourcesContent":["import Settings from './settings';\nimport C from './constants'\n\nexport class TetrisFigure {\n\tconstructor(startPosition, rotation, color='#00ff00') {\n\t\tthis.position = this.ensureInside(startPosition, rotation);\n\t\tthis.rotation = rotation;\n\t\tthis.color = color\n\t}\n\n\trotate() {\n\t\treturn new this.constructor(this.position, (this.rotation + 1) % 4, this.color)\n\t}\n\n\tmove(newPosition) {\n\t\treturn new this.constructor(newPosition, this.rotation, this.color)\n\t}\n\n\tgetNextFigure(action) {\n\t\tconst {x, y} = this.position;\n\t\tswitch (action) {\n\t\t\tcase C.left:\n\t\t\t\treturn this.move({ x: x - 1, y });\n\t\t\tcase C.right:\n\t\t\t\treturn this.move({x: x + 1, y});\n\t\t\tcase C.down: \n\t\t\t\treturn this.move({x, y: y + 1});\n\t\t\tcase C.rotate:\n\t\t\t\treturn this.rotate();\n\t\t\tdefault:\n\t\t\t\treturn this;\n\t\t}\n\t}\n\n\tget blocks() {\n\t\tswitch (this.rotation) {\n\t\t\tcase 0:\n\t\t\t\treturn [\n\t\t\t\t\t{ ...this.position },\n\t\t\t\t\t{ ...this.position, x: this.position.x - 1 },\n\t\t\t\t\t{ ...this.position, x: this.position.x + 1 },\n\t\t\t\t\t{ ...this.position, y: this.position.y - 1 }\n\t\t\t\t];\n\t\t\tcase 1:\n\t\t\t\treturn [\n\t\t\t\t\t{ ...this.position },\n\t\t\t\t\t{ ...this.position, x: this.position.x + 1 },\n\t\t\t\t\t{ ...this.position, y: this.position.y - 1 },\n\t\t\t\t\t{ ...this.position, y: this.position.y + 1 }\n\t\t\t\t]\n\t\t\tcase 2:\n\t\t\t\treturn [\n\t\t\t\t\t{ ...this.position },\n\t\t\t\t\t{ ...this.position, x: this.position.x - 1 },\n\t\t\t\t\t{ ...this.position, x: this.position.x + 1 },\n\t\t\t\t\t{ ...this.position, y: this.position.y + 1 }\n\t\t\t\t]\n\t\t\tcase 3:\n\t\t\t\treturn [\n\t\t\t\t\t{ ...this.position },\n\t\t\t\t\t{ ...this.position, x: this.position.x - 1 },\n\t\t\t\t\t{ ...this.position, y: this.position.y - 1 },\n\t\t\t\t\t{ ...this.position, y: this.position.y + 1 }\n\t\t\t\t]\n\t\t\tdefault: return []\n\t\t}\n\t}\n\n\tensureInside({x, y}, rotation) {\n\t\treturn {\n\t\t\tx: Math.max(1, Math.min(x, Settings.stageSize.width - (rotation == 3 ? 1 : 2))),\n\t\t\ty: Math.max(1, Math.min(y, Settings.stageSize.height - (rotation == 0 ? 1 : 2)))\n\t\t}\n\t}\n\n}\n\n\nexport function getMovableBlock() {\n\treturn new TetrisFigure({x: 1, y: 4}, 0);\n}"]},"metadata":{},"sourceType":"module"}