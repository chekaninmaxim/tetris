{"ast":null,"code":"import Settings from './settings';\nimport C from './constants';\nimport { getRandomFigure } from './figure';\nexport const makeInitialState = function () {\n  const blocksMap = [];\n\n  for (let i = 0; i < Settings.stageSize.height; i++) {\n    blocksMap.push(Array(Settings.stageSize.width));\n  }\n\n  return {\n    figure: getRandomFigure(),\n    blocksMap: blocksMap,\n    score: 0\n  };\n};\n\nconst positionsEqual = function (p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n};\n\nexport function blocksReducer({\n  figure,\n  blocksMap,\n  score\n}, action) {\n  if (!figure) {\n    return {\n      figure: getRandomFigure(),\n      blocksMap,\n      score\n    };\n  }\n\n  const oldPositions = figure.blocks;\n  const newFigure = getNextFigure(figure, action.type);\n  const newPositions = newFigure.blocks;\n  let isStuck = false;\n\n  try {\n    isStuck = newPositions.some(block => blocksMap[block.y][block.x]);\n  } catch (error) {\n    console.log(error);\n    return {\n      figure,\n      blocksMap,\n      score\n    };\n  }\n\n  const samePositions = newPositions.every((block, i) => positionsEqual(block, oldPositions[i]));\n\n  if (action.type === C.DOWN) {\n    if (isStuck || samePositions) {\n      const newBlocksMap = blocksMap.slice();\n\n      for (let block of oldPositions) {\n        newBlocksMap[block.y][block.x] = figure.color;\n      }\n\n      return {\n        figure: null,\n        blocksMap: reduceFullRows(newBlocksMap),\n        score: score + 1\n      };\n    } else {\n      return {\n        figure: newFigure,\n        blocksMap,\n        score\n      };\n    }\n  } else {\n    return {\n      figure: isStuck ? figure : newFigure,\n      blocksMap,\n      score\n    };\n  }\n}\n\nfunction reduceFullRows(blocksMap) {\n  blocksMap[blocksMap.length - 1].forEach(element => {\n    Boolean(element);\n  });\n  const withoutFullRows = blocksMap.filter(row => !row.every(b => Boolean(b)));\n  const numberOfRowsToAdd = Settings.stageSize.height - withoutFullRows.length;\n  const emptyRows = [];\n\n  for (let i = 0; i < numberOfRowsToAdd; i++) {\n    emptyRows[i] = Array(Settings.stageSize.width);\n  }\n\n  return emptyRows.concat(withoutFullRows);\n}\n\nfunction getNextFigure(figure, action) {\n  const {\n    x,\n    y\n  } = figure.position;\n\n  switch (action) {\n    case C.LEFT:\n      return figure.move({\n        x: x - 1,\n        y\n      });\n\n    case C.RIGHT:\n      return figure.move({\n        x: x + 1,\n        y\n      });\n\n    case C.DOWN:\n      return figure.move({\n        x,\n        y: y + 1\n      });\n\n    case C.ROTATE:\n      return figure.rotate();\n\n    default:\n      return figure;\n  }\n}","map":{"version":3,"sources":["/home/ovo/projects/my-app/src/state.js"],"names":["Settings","C","getRandomFigure","makeInitialState","blocksMap","i","stageSize","height","push","Array","width","figure","score","positionsEqual","p1","p2","x","y","blocksReducer","action","oldPositions","blocks","newFigure","getNextFigure","type","newPositions","isStuck","some","block","error","console","log","samePositions","every","DOWN","newBlocksMap","slice","color","reduceFullRows","length","forEach","element","Boolean","withoutFullRows","filter","row","b","numberOfRowsToAdd","emptyRows","concat","position","LEFT","move","RIGHT","ROTATE","rotate"],"mappings":"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","sourcesContent":["import Settings from './settings'\nimport C from './constants'\nimport { getRandomFigure } from './figure'\n\nexport const makeInitialState = function() {\n\tconst blocksMap = [];\n\n\tfor (let i = 0; i < Settings.stageSize.height; i++) {\n\t\tblocksMap.push(Array(Settings.stageSize.width));\n\t}\n\n\treturn {\n\t\tfigure : getRandomFigure(),\n\t\tblocksMap: blocksMap,\n\t\tscore: 0\n\t}\n}\n\nconst positionsEqual = function(p1, p2) {\n\treturn p1.x === p2.x && p1.y === p2.y\n}\n\nexport function blocksReducer({ figure, blocksMap, score }, action) {\n\tif (!figure) {\n\t\treturn {\n\t\t\tfigure: getRandomFigure(),\n\t\t\tblocksMap,\n\t\t\tscore\n\t\t}\n\t}\n\n\tconst oldPositions = figure.blocks;\n\n\tconst newFigure = getNextFigure(figure, action.type)\n\tconst newPositions = newFigure.blocks;\n\n\tlet isStuck = false; \n\ttry {\n\t\tisStuck = newPositions.some(\n\t\t\tblock => blocksMap[block.y][block.x]\n\t\t);\n\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\treturn {\n\t\t\tfigure,\n\t\t\tblocksMap,\n\t\t\tscore\n\t\t}\t\n\t}\n\n\tconst samePositions = newPositions.every(\n\t\t(block, i) => positionsEqual(block, oldPositions[i])\n\t);\n\n\tif (action.type === C.DOWN) {\n\t\tif (isStuck || samePositions) {\n\t\t\tconst newBlocksMap = blocksMap.slice();\n\t\t\tfor (let block of oldPositions) {\n\t\t\t\tnewBlocksMap[block.y][block.x] = figure.color;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfigure: null,\n\t\t\t\tblocksMap: reduceFullRows(newBlocksMap),\n\t\t\t\tscore: score + 1\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tfigure: newFigure,\n\t\t\t\tblocksMap,\n\t\t\t\tscore\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tfigure: isStuck ? figure : newFigure,\n\t\t\tblocksMap,\n\t\t\tscore\n\t\t};\n\t}\n}\n\nfunction reduceFullRows(blocksMap) {\n\tblocksMap[blocksMap.length - 1].forEach(element => {\n\t\tBoolean(element)\n\t});\n\tconst withoutFullRows = blocksMap.filter(row => !row.every(b => Boolean(b)));\n\tconst numberOfRowsToAdd = Settings.stageSize.height - withoutFullRows.length;\n\tconst emptyRows = [];\n\tfor (let i = 0; i < numberOfRowsToAdd; i ++) {\n\t\temptyRows[i] = Array(Settings.stageSize.width)\n\t}\n\treturn emptyRows.concat(withoutFullRows);\n}\n\nfunction getNextFigure(figure, action) {\n\tconst { x, y } = figure.position;\n\tswitch (action) {\n\t\tcase C.LEFT:\n\t\t\treturn figure.move({ x: x - 1, y });\n\t\tcase C.RIGHT:\n\t\t\treturn figure.move({ x: x + 1, y });\n\t\tcase C.DOWN:\n\t\t\treturn figure.move({ x, y: y + 1 });\n\t\tcase C.ROTATE:\n\t\t\treturn figure.rotate();\n\t\tdefault:\n\t\t\treturn figure;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}